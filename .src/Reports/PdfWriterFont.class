' Gambas class file

' Software: PDFWriterFont
' Version : 0.0.2
' Date    : 2007-10-10
' Author  : Luigi Carlotto <md9327@mclink.it>
' License : GPL2
' Note    : Conversion of FPDF 1.53 library (http://www.fpdf.org) for the Gambas language
'           Static class for Fonts structure

Static Public Function Font(name As String) As Integer[]

  Dim i As New Integer[]

  Select Case name
    Case "courier"
      i = PdfWriterFont.courier()
    Case "courierB"
      i = PdfWriterFont.courierB()
    Case "courierI"
      i = PdfWriterFont.courierI()
    Case "courierBI"
      i = PdfWriterFont.courierBI()
    Case "helvetica"
      i = PdfWriterFont.helvetica()
    Case "helveticaB"
      i = PdfWriterFont.helveticaB()
    Case "helveticaBI"
      i = PdfWriterFont.helveticaBI()
    Case "helveticaI"
      i = PdfWriterFont.helveticaI()
    Case "symbol"
      i = PdfWriterFont.symbol()
    Case "times"
      i = PdfWriterFont.times()
    Case "timesB"
      i = PdfWriterFont.timesB()
    Case "timesBI"
      i = PdfWriterFont.timesBI()
    Case "timesI"
      i = PdfWriterFont.timesI()
    Case "serif"
      i = PdfWriterFont.serif()
    Case "serifB"
      i = PdfWriterFont.serifB()
    Case "serifI"
      i = PdfWriterFont.serifI()
    Case "serifBI"
      i = PdfWriterFont.serifBI()
    Case "zapfdingbats"
      i = PdfWriterFont.zapfdingbats()

    Default
      Error.Raise("Could not include font definition")
  End Select
  Return i

End

Static Public Function courier() As Integer[]

  Dim v As New Integer[]
  Dim i As Integer

  For i = 0 To 255
    v.Add(600)
  Next
  Return (v)

End

Static Public Function courierB() As Integer[]

  Dim v As New Integer[]
  Dim i As Integer

  For i = 0 To 255
    v.Add(600)
  Next
  Return (v)

End

Static Public Function courierI() As Integer[]

  Dim v As New Integer[]
  Dim i As Integer

  For i = 0 To 255
    v.Add(600)
  Next
  Return (v)

End

Static Public Function courierBI() As Integer[]

  Dim v As New Integer[]
  Dim i As Integer

  For i = 0 To 255
    v.Add(600)
  Next
  Return (v)

End

Static Public Function serif() As Integer[]

  Dim v As New Integer[]
  Dim i As Integer

  For i = 0 To 255
    v.Add(600)
  Next
  Return (v)

End

Static Public Function serifB() As Integer[]

  Dim v As New Integer[]
  Dim i As Integer

  For i = 0 To 255
    v.Add(600)
  Next
  Return (v)

End

Static Public Function serifI() As Integer[]

  Dim v As New Integer[]
  Dim i As Integer

  For i = 0 To 255
    v.Add(600)
  Next
  Return (v)

End

Static Public Function helvetica() As Integer[]

  Dim v As New Integer[]

  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 355, 556, 556, 889, 667, 191])
  v.Insert([333, 333, 389, 584, 278, 333, 278, 278, 556, 556])
  v.Insert([556, 556, 556, 556, 556, 556, 556, 556, 278, 278])
  v.Insert([584, 584, 584, 556, 1015, 667, 667, 722, 722, 667])
  v.Insert([611, 778, 722, 278, 500, 667, 556, 833, 722, 778])
  v.Insert([667, 778, 722, 667, 611, 722, 667, 944, 667, 667])
  v.Insert([611, 278, 278, 278, 469, 556, 333, 556, 556, 500])
  v.Insert([556, 556, 278, 556, 556, 222, 222, 500, 222, 833])
  v.Insert([556, 556, 556, 556, 333, 500, 278, 556, 500, 722])
  v.Insert([500, 500, 500, 334, 260, 334, 584, 350, 556, 350])
  v.Insert([222, 556, 333, 1000, 556, 556, 333, 1000, 667, 333])
  v.Insert([1000, 350, 611, 350, 350, 222, 222, 333, 333, 350])
  v.Insert([556, 1000, 333, 1000, 500, 333, 944, 350, 500, 667])
  v.Insert([278, 333, 556, 556, 556, 556, 260, 556, 333, 737])
  v.Insert([370, 556, 584, 333, 737, 333, 400, 584, 333, 333])
  v.Insert([333, 556, 537, 278, 333, 333, 365, 556, 834, 834])
  v.Insert([834, 611, 667, 667, 667, 667, 667, 667, 1000, 722])
  v.Insert([667, 667, 667, 667, 278, 278, 278, 278, 722, 722])
  v.Insert([778, 778, 778, 778, 778, 584, 39778, 722, 722, 722])
  v.Insert([722, 667, 667, 611, 556, 556, 556, 556, 556, 556])
  v.Insert([889, 500, 556, 556, 556, 556, 278, 278, 278, 278])
  v.Insert([556, 556, 556, 556, 556, 556, 556, 584, 611, 556])
  v.Insert([556, 556, 556, 500, 556, 500])
  Return (v)

End

Static Public Function helveticaB() As Integer[]

  Dim v As New Integer[]

  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 333, 474, 556, 556, 889, 722, 238])
  v.Insert([333, 333, 389, 584, 278, 333, 278, 278, 556, 556])
  v.Insert([556, 556, 556, 556, 556, 556, 556, 556, 333, 333])
  v.Insert([584, 584, 584, 611, 975, 722, 722, 722, 722, 667])
  v.Insert([611, 778, 722, 278, 556, 722, 611, 833, 722, 778])
  v.Insert([667, 778, 722, 667, 611, 722, 667, 944, 667, 667])
  v.Insert([611, 333, 278, 333, 584, 556, 333, 556, 611, 556])
  v.Insert([611, 556, 333, 611, 611, 278, 278, 556, 278, 889])
  v.Insert([611, 611, 611, 611, 389, 556, 333, 611, 556, 778])
  v.Insert([556, 556, 500, 389, 280, 389, 584, 350, 556, 350])
  v.Insert([278, 556, 500, 1000, 556, 556, 333, 1000, 667, 333])
  v.Insert([1000, 350, 611, 350, 350, 278, 278, 500, 500, 350])
  v.Insert([556, 1000, 333, 1000, 556, 333, 944, 350, 500, 667])
  v.Insert([278, 333, 556, 556, 556, 556, 280, 556, 333, 737])
  v.Insert([370, 556, 584, 333, 737, 333, 400, 584, 333, 333])
  v.Insert([333, 611, 556, 278, 333, 333, 365, 556, 834, 834])
  v.Insert([834, 611, 722, 722, 722, 722, 722, 722, 1000, 722])
  v.Insert([667, 667, 667, 667, 278, 278, 278, 278, 722, 722])
  v.Insert([778, 778, 778, 778, 778, 584, 778, 722, 722, 722])
  v.Insert([722, 667, 667, 611, 556, 556, 556, 556, 556, 556])
  v.Insert([889, 556, 556, 556, 556, 556, 278, 278, 278, 278])
  v.Insert([611, 611, 611, 611, 611, 611, 611, 584, 611, 611])
  v.Insert([611, 611, 611, 556, 611, 556])
  Return (v)

End

Static Public Function helveticaI() As Integer[]

  Dim v As New Integer[]

  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 355, 556, 556, 889, 667, 191])
  v.Insert([333, 333, 389, 584, 278, 333, 278, 278, 556, 556])
  v.Insert([556, 556, 556, 556, 556, 556, 556, 556, 278, 278])
  v.Insert([584, 584, 584, 556, 1015, 667, 667, 722, 722, 667])
  v.Insert([611, 778, 722, 278, 500, 667, 556, 833, 722, 778])
  v.Insert([667, 778, 722, 667, 611, 722, 667, 944, 667, 667])
  v.Insert([611, 278, 278, 278, 469, 556, 333, 556, 556, 500])
  v.Insert([556, 556, 278, 556, 556, 222, 222, 500, 222, 833])
  v.Insert([556, 556, 556, 556, 333, 500, 278, 556, 500, 722])
  v.Insert([500, 500, 500, 334, 260, 334, 584, 350, 556, 350])
  v.Insert([222, 556, 333, 1000, 556, 556, 333, 1000, 667, 333])
  v.Insert([1000, 350, 611, 350, 350, 222, 222, 333, 333, 350])
  v.Insert([556, 1000, 333, 1000, 500, 333, 944, 350, 500, 667])
  v.Insert([278, 333, 556, 556, 556, 556, 260, 556, 333, 737])
  v.Insert([370, 556, 584, 333, 737, 333, 400, 584, 333, 333])
  v.Insert([333, 556, 537, 278, 333, 333, 365, 556, 834, 834])
  v.Insert([834, 611, 667, 667, 667, 667, 667, 667, 1000, 722])
  v.Insert([667, 667, 667, 667, 278, 278, 278, 278, 722, 722])
  v.Insert([778, 778, 778, 778, 778, 584, 778, 722, 722, 722])
  v.Insert([722, 667, 667, 611, 556, 556, 556, 556, 556, 556])
  v.Insert([889, 500, 556, 556, 556, 556, 278, 278, 278, 278])
  v.Insert([556, 556, 556, 556, 556, 556, 556, 584, 611, 556])
  v.Insert([556, 556, 556, 500, 556, 500])
  Return (v)

End

Static Public Function helveticaBI() As Integer[]

  Dim v As New Integer[]

  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 278, 278, 278, 278, 278, 278, 278])
  v.Insert([278, 278, 278, 333, 474, 556, 556, 889, 722, 238])
  v.Insert([333, 333, 389, 584, 278, 333, 278, 278, 556, 556])
  v.Insert([556, 556, 556, 556, 556, 556, 556, 556, 333, 333])
  v.Insert([584, 584, 584, 611, 975, 722, 722, 722, 722, 667])
  v.Insert([611, 778, 722, 278, 556, 722, 611, 833, 722, 778])
  v.Insert([667, 778, 722, 667, 611, 722, 667, 944, 667, 667])
  v.Insert([611, 333, 278, 333, 584, 556, 333, 556, 611, 556])
  v.Insert([611, 556, 333, 611, 611, 278, 278, 556, 278, 889])
  v.Insert([611, 611, 611, 611, 389, 556, 333, 611, 556, 778])
  v.Insert([556, 556, 500, 389, 280, 389, 584, 350, 556, 350])
  v.Insert([278, 556, 500, 1000, 556, 556, 333, 1000, 667, 333])
  v.Insert([1000, 350, 611, 350, 350, 278, 278, 500, 500, 350])
  v.Insert([556, 1000, 333, 1000, 556, 333, 944, 350, 500, 667])
  v.Insert([278, 333, 556, 556, 556, 556, 280, 556, 333, 737])
  v.Insert([370, 556, 584, 333, 737, 333, 400, 584, 333, 333])
  v.Insert([333, 611, 556, 278, 333, 333, 365, 556, 834, 834])
  v.Insert([834, 611, 722, 722, 722, 722, 722, 722, 1000, 722])
  v.Insert([667, 667, 667, 667, 278, 278, 278, 278, 722, 722])
  v.Insert([778, 778, 778, 778, 778, 584, 778, 722, 722, 722])
  v.Insert([722, 667, 667, 611, 556, 556, 556, 556, 556, 556])
  v.Insert([889, 556, 556, 556, 556, 556, 278, 278, 278, 278])
  v.Insert([611, 611, 611, 611, 611, 611, 611, 584, 611, 611])
  v.Insert([611, 611, 611, 556, 611, 556])
  Return (v)

End

Static Public Function symbol() As Integer[]

  Dim v As New Integer[]

  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 333, 713, 500, 549, 833, 778, 439])
  v.Insert([333, 333, 500, 549, 250, 549, 250, 278, 500, 500])
  v.Insert([500, 500, 500, 500, 500, 500, 500, 500, 278, 278])
  v.Insert([549, 549, 549, 444, 549, 722, 667, 722, 612, 611])
  v.Insert([763, 603, 722, 333, 631, 722, 686, 889, 722, 722])
  v.Insert([768, 741, 556, 592, 611, 690, 439, 768, 645, 795])
  v.Insert([611, 333, 863, 333, 658, 500, 500, 631, 549, 549])
  v.Insert([494, 439, 521, 411, 603, 329, 603, 549, 549, 576])
  v.Insert([521, 549, 549, 521, 549, 603, 439, 576, 713, 686])
  v.Insert([493, 686, 494, 480, 200, 480, 549, 0, 0, 0])
  v.Insert([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  v.Insert([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  v.Insert([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  v.Insert([750, 620, 247, 549, 167, 713, 500, 753, 753, 753])
  v.Insert([753, 1042, 987, 603, 987603, 400, 549, 411, 549])
  v.Insert([549, 713, 494, 460, 549, 549, 549, 549, 1000, 603])
  v.Insert([1000, 658, 823, 686, 795, 987, 768, 768, 823, 768])
  v.Insert([768, 713, 713, 713, 713, 713, 713, 713, 768, 713])
  v.Insert([790, 790, 890, 823, 549, 250, 713, 603, 603, 1042])
  v.Insert([987, 603, 987, 603, 494, 329, 790, 790, 786, 713])
  v.Insert([384, 384, 384, 384, 384, 384494, 494, 494, 494])
  v.Insert([0, 329, 274, 686, 686, 686, 384, 384, 384, 384])
  v.Insert([384, 384, 494, 494, 494, 0])
  Return (v)

End

Static Public Function times() As Integer[]

  Dim v As New Integer[]

  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 333, 408, 500, 500, 833, 778, 180])
  v.Insert([333, 333, 500, 564, 250, 333, 250, 278, 500, 500])
  v.Insert([500, 500, 500, 500, 500, 500, 500, 500, 278, 278])
  v.Insert([564, 564, 564, 444, 921, 722, 667, 667, 722, 611])
  v.Insert([556, 722, 722, 333, 389, 722, 611, 889, 722, 722])
  v.Insert([556, 722, 667, 556, 611, 722, 722, 944, 722, 722])
  v.Insert([611, 333, 278, 333, 469, 500, 333, 444, 500, 444])
  v.Insert([500, 444, 333, 500, 500, 278, 278, 500, 278, 778])
  v.Insert([500, 500, 500, 500, 333, 389, 278, 500, 500, 722])
  v.Insert([500, 500, 444, 480, 200, 480, 541, 350, 500, 350])
  v.Insert([333, 500, 444, 1000, 500, 500, 333, 1000, 556, 333])
  v.Insert([889, 350, 611, 350, 350, 333, 333, 444, 444, 350])
  v.Insert([500, 1000, 333, 980, 389, 333, 722, 350, 444, 722])
  v.Insert([250, 333, 500, 500, 500, 500, 200, 500, 333, 760])
  v.Insert([276, 500, 564, 333, 760, 333, 400, 564, 300, 300])
  v.Insert([333, 500, 453, 250, 333, 300, 310, 500, 750, 750])
  v.Insert([750, 444, 722, 722, 722, 722, 722, 722, 889, 667])
  v.Insert([611, 611, 611, 611, 333, 333, 333, 333, 722, 722])
  v.Insert([722, 722, 722, 722, 722, 564, 722, 722, 722, 722])
  v.Insert([722, 722, 556, 500, 444, 444, 444, 444, 444, 444])
  v.Insert([667, 444, 444, 444, 444, 444, 278, 278, 278, 278])
  v.Insert([500, 500, 500, 500, 500, 500, 500, 564, 500, 500])
  v.Insert([500, 500, 500, 500, 500, 500])
  Return (v)

End

Static Public Function timesB() As Integer[]

  Dim v As New Integer[]

  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 333, 555, 500, 500, 1000, 833, 278])
  v.Insert([333, 333, 500, 570, 250, 333, 250, 278, 500, 500])
  v.Insert([500, 500, 500, 500, 500, 500, 500, 500, 333, 333])
  v.Insert([570, 570, 570, 500, 930, 722, 667, 722, 722, 667])
  v.Insert([611, 778, 778, 389, 500, 778, 667, 944, 722, 778])
  v.Insert([611, 778, 722, 556, 667, 722, 722, 1000, 722, 722])
  v.Insert([667, 333, 278, 333, 581, 500, 333, 500, 556, 444])
  v.Insert([556, 444, 333, 500, 556, 278, 333, 556, 278, 833])
  v.Insert([556, 500, 556, 556, 444, 389, 333, 556, 500, 722])
  v.Insert([500, 500, 444, 394, 220, 394, 520, 350, 500, 350])
  v.Insert([333, 500, 500, 1000, 500, 500, 333, 1000, 556, 333])
  v.Insert([1000, 350, 667, 350, 350, 333, 333, 500, 500, 350])
  v.Insert([500, 1000, 333, 1000, 389, 333, 722, 350, 444, 722])
  v.Insert([250, 333, 500, 500, 500, 500, 220, 500, 333, 747])
  v.Insert([300, 500, 570, 333, 747, 333, 400, 570, 300, 300])
  v.Insert([333, 556, 540, 250, 333, 300, 330, 500, 750, 750])
  v.Insert([750, 500, 722, 722, 722, 722, 722, 722, 1000, 722])
  v.Insert([667, 667, 667, 667, 389, 389, 389, 389, 722, 722])
  v.Insert([778, 778, 778, 778, 778, 570, 778, 722, 722, 722])
  v.Insert([722, 722, 611, 556, 500, 500, 500, 500, 500, 500])
  v.Insert([722, 444, 444, 444, 444, 444, 278, 278, 278, 278])
  v.Insert([500, 556, 500, 500, 500, 500, 500, 570, 500, 556])
  v.Insert([556, 556, 556, 500, 556, 500])
  Return (v)

End

Static Public Function timesBI() As Integer[]

  Dim v As New Integer[]

  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 389, 555, 500, 500, 833, 778, 278])
  v.Insert([333, 333, 500, 570, 250, 333, 250, 278, 500, 500])
  v.Insert([500, 500, 500, 500, 500, 500, 500, 500, 333, 333])
  v.Insert([570, 570, 570, 500, 832, 667, 667, 667, 722, 667])
  v.Insert([667, 722, 778, 389, 500, 667, 611, 889, 722, 722])
  v.Insert([611, 722, 667, 556, 611, 722, 667, 889, 667, 611])
  v.Insert([611, 333, 278, 333, 570, 500, 333, 500, 500, 444])
  v.Insert([500, 444, 333, 500, 556, 278, 278, 500, 278, 778])
  v.Insert([556, 500, 500, 500, 389, 389, 278, 556, 444, 667])
  v.Insert([500, 444, 389, 348, 220, 348, 570, 350, 500, 350])
  v.Insert([333, 500, 500, 1000, 500, 500, 333, 1000, 556, 333])
  v.Insert([944, 350, 611, 350, 350, 333, 333, 500, 500, 350])
  v.Insert([500, 1000, 333, 1000, 389, 333, 722, 350, 389, 611])
  v.Insert([250, 389, 500, 500, 500, 500, 220, 500, 333, 747])
  v.Insert([266, 500, 606, 333, 747, 333, 400, 570, 300, 300])
  v.Insert([333, 576, 500, 250, 333, 300, 300, 500, 750, 750])
  v.Insert([750, 500, 667, 667, 667, 667, 667, 667, 944, 667])
  v.Insert([667, 667, 667, 667, 389, 389, 389, 389, 722, 722])
  v.Insert([722, 722, 722, 722, 722, 570, 722, 722, 722, 722])
  v.Insert([722, 611, 611, 500, 500, 500, 500, 500, 500, 500])
  v.Insert([722, 444, 444, 444, 444, 444, 278, 278, 278, 278])
  v.Insert([500, 556, 500, 500, 500, 500, 500, 570, 500, 556])
  v.Insert([556, 556, 556, 444, 500, 444])
  Return (v)

End

Static Public Function timesI() As Integer[]

  Dim v As New Integer[]

  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 250, 250, 250, 250, 250, 250, 250])
  v.Insert([250, 250, 250, 333, 420, 500, 500, 833, 778, 214])
  v.Insert([333, 333, 500, 675, 250, 333, 250, 278, 500, 500])
  v.Insert([500, 500, 500, 500, 500, 500, 500, 500, 333, 333])
  v.Insert([675, 675, 675, 500, 920, 611, 611, 667, 722, 611])
  v.Insert([611, 722, 722, 333, 444, 667, 556, 833, 667, 722])
  v.Insert([611, 722, 611, 500, 556, 722, 611, 833, 611, 556])
  v.Insert([556, 389, 278, 389, 422, 500, 333, 500, 500, 444])
  v.Insert([500, 444, 278, 500, 500, 278, 278, 444, 278, 722])
  v.Insert([500, 500, 500, 500, 389, 389, 278, 500, 444, 667])
  v.Insert([444, 444, 389, 400, 275, 400, 541, 350, 500, 350])
  v.Insert([333, 500, 556, 889, 500, 500, 333, 1000, 500, 333])
  v.Insert([944, 350, 556, 350, 350, 333, 333, 556, 556, 350])
  v.Insert([500, 889, 333, 980, 389, 333, 667, 350, 389, 556])
  v.Insert([250, 389, 500, 500, 500, 500, 275, 500, 333, 760])
  v.Insert([276, 500, 675, 333, 760, 333, 400, 675, 300, 300])
  v.Insert([333, 500, 523, 250, 333, 300, 310, 500, 750, 750])
  v.Insert([750, 500, 611, 611, 611, 611, 611, 611, 889, 667])
  v.Insert([611, 611, 611, 611, 333, 333, 333, 333, 722, 667])
  v.Insert([722, 722, 722, 722, 722, 675, 722, 722, 722, 722])
  v.Insert([722, 556, 611, 500, 500, 500, 500, 500, 500, 500])
  v.Insert([667, 444, 444, 444, 444, 444, 278, 278, 278, 278])
  v.Insert([500, 500, 500, 500, 500, 500, 500, 675, 500, 500])
  v.Insert([500, 500, 500, 444, 500, 444])
  Return (v)

End

Static Public Function zapfdingbats() As Integer[]

  Dim v As New Integer[]

  v.Insert([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  v.Insert([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  v.Insert([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  v.Insert([0, 0, 278, 974, 961, 974, 980, 719, 789, 790])
  v.Insert([791, 690, 960, 939, 549, 855, 911, 933, 911, 945])
  v.Insert([974, 755, 846, 762, 761, 571, 677, 763, 760, 759])
  v.Insert([754, 494, 552, 537, 577, 692, 786, 788, 788, 790])
  v.Insert([793, 794, 816, 823, 789, 841, 823, 833, 816, 831])
  v.Insert([923, 744, 723, 749, 790, 792, 695, 776, 768, 792])
  v.Insert([759, 707, 708, 682, 701, 826, 815, 789, 789, 707])
  v.Insert([687, 696, 689, 786, 787, 713, 791, 785, 791, 873])
  v.Insert([761, 762, 762, 759, 759, 892, 892, 788, 784, 438])
  v.Insert([138, 277, 415, 392, 392, 668, 668, 0, 390, 390])
  v.Insert([317, 317, 276, 276, 509, 509, 410, 410, 234, 234])
  v.Insert([334, 334, 0, 0, 0, 0, 0, 0, 0, 0])
  v.Insert([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  v.Insert([0, 732, 544, 544, 910, 667, 760, 760, 776, 595])
  v.Insert([694, 626, 788, 788, 788, 788, 788, 788, 788, 788])
  v.Insert([788, 788, 788, 788, 788, 788, 788, 788, 788, 788])
  v.Insert([788, 788, 788, 788, 788, 788, 788, 788, 788, 788])
  v.Insert([788, 788, 788, 788, 788, 788, 788, 788, 788, 788])
  v.Insert([788, 788, 894, 838, 1016, 458, 748, 924, 748, 918])
  v.Insert([927, 928, 928, 834, 873, 828, 924, 924, 917, 930])
  v.Insert([931, 463, 883, 836, 836, 867, 867, 696, 696, 874])
  v.Insert([0, 874, 760, 946, 771, 865, 771, 888, 967, 888])
  v.Insert([831, 873, 927, 970, 918, 0])
  Return (v)

End
