' Gambas class file

'################################################
'# nom du fichier           : CFormat.class
'# Auteur                   : Fabien Bodard
'################################################
Private $iBackground As Integer = -1
Private $oFont As Font
Private $iAlignment As Integer = -1
Private $iForeground As Integer = -1
Private $iPadding As Integer = -1
Private $iWidth As Integer = -1
Private $iHeight As Integer = -1
Private $sFormat As String

Property Background As Integer
Property Foreground As Integer
Property Alignment As Integer
Property {Font} As Font
Property Padding As Integer
Property Width As Integer
Property Height As Integer
Property {Format} As String

Static Public Function _Get(sFormat As String) As CFormat

  Dim hFormat As New CFormat
  Dim s As String
  Dim spl As New String[]

  sFormat = Trim(sFormat)
  If Right(sFormat, 1) = ";" Then sFormat = Left(sFormat, Len(sFormat) - 1)
  For Each s In Split(LCase(sFormat), ";")
    spl = Scan(s, "*: *")
    Select Case Trim(spl[0])
      Case "background"
        hFormat.Background = Val(spl[1])
      Case "foreground"
        hFormat.Foreground = Val(spl[1])
      Case "font"
        hFormat.Font = Font[spl[1]]
      Case "padding"
        hFormat.Padding = Val(spl[1])
      Case "alignment"
        Try hFormat.Alignment = Classes["Align"][spl[1]].Value
      Case "width"
        hFormat.Width = Val(spl[1])
      Case "height"
        hFormat.Height = Val(spl[1])
      Case "format"
        hFormat.Format = Val(spl[1])
      Case Else
        Print "Error: Bad Format String: " & s
    End Select
  Next
  Return hFormat
Catch
  Print "Error: Bad Format String: " & s
  Return hFormat 'ERROR.Raise("Bad Format String: " & s)

End

Public Function ToString() As String

  Dim sRet As String
  Dim s As String

  If Not (IsNull($iBackground) Or $iBackground = -1) Then sRet &= "Background: &H" & Hex($iBackground, 6) & "&; "
  If Not (IsNull($iForeground) Or $iForeground = -1) Then sRet &= "Foreground: &H" & Hex($iForeground, 6) & "&; "
  If Not IsNull($oFont) Then sRet &= "Font: " & $oFont.ToString() & "; "
  If Not (IsNull($iPadding) Or $iPadding = -1) Then sRet &= "Padding: " & $iPadding & "; "
  If Not (IsNull($iAlignment) Or $iAlignment = -1) Then
    For Each s In Classes["Align"].Symbols
      If s = Class.Constant Then
        If Classes["Align"][s].Value = $iAlignment Then Break
      Endif
    Next
    sRet &= "Alignment: " & s & "; "
  Endif
  If Not (IsNull($iWidth) Or $iWidth = -1) Then sRet &= "Width: " & $iWidth & "; "
  If Not (IsNull($iHeight) Or $iHeight = -1) Then sRet &= "Height: " & $iHeight & "; "
  If Not IsNull($sFormat) Then sRet &= "Format: " & $sFormat & ";"

  Return sRet

End

Private Function Background_Read() As Integer

  Return $iBackground

End

Private Sub Background_Write(Value As Integer)

  $iBackground = Value

End

Private Function Foreground_Read() As Integer

  Return $iForeground

End

Private Sub Foreground_Write(Value As Integer)

  $iForeground = Value

End

Private Function Alignment_Read() As Integer

  Return $iAlignment

End

Private Sub Alignment_Write(Value As Integer)

  $iAlignment = Value

End

Private Function Font_Read() As Font

  Return $oFont

End

Private Sub Font_Write(Value As Font)

  $oFont = Value

End

Private Function Padding_Read() As Integer

  Return $iPadding

End

Private Sub Padding_Write(Value As Integer)

  $iPadding = Value

End

Public Function Copy() As CFormat

  Dim hFormat As New CFormat

  hFormat = CFormat[Me.ToString()]

  Return hFormat

End

Private Function Width_Read() As Integer

  Return $iWidth

End

Private Sub Width_Write(Value As Integer)

  $iWidth = Value

End

Private Function Height_Read() As Integer

  Return $iHeight

End

Private Sub Height_Write(Value As Integer)

  $iHeight = Value

End

Private Function Format_Read() As String

  Return $sFormat

End

Private Sub Format_Write(Value As String)

  $sFormat = Value

End
